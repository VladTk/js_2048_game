{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$gameCells = $09e991522ca7e64e$var$gameField.querySelectorAll(\".field-cell\");\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static GAME_STATUS = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.status = $a5fd07fa01589658$var$Game.GAME_STATUS.idle;\n        this.initialState = initialState;\n        this.state = initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n    }\n    moveLeft() {\n        if (this.status !== $a5fd07fa01589658$var$Game.GAME_STATUS.playing) return;\n        const newState = this.state.map((row)=>this.#processRow(row, \"left\"));\n        this.#compareAndMove(newState);\n    }\n    moveRight() {\n        if (this.status !== $a5fd07fa01589658$var$Game.GAME_STATUS.playing) return;\n        const newState = this.state.map((row)=>this.#processRow(row, \"right\"));\n        this.#compareAndMove(newState);\n    }\n    moveUp() {\n        if (this.status !== $a5fd07fa01589658$var$Game.GAME_STATUS.playing) return;\n        const transposedState = this.#transposeState(this.state);\n        const newTransposedState = transposedState.map((row)=>{\n            return this.#processRow(row, \"left\");\n        });\n        const newState = this.#transposeState(newTransposedState);\n        this.#compareAndMove(newState);\n    }\n    moveDown() {\n        if (this.status !== $a5fd07fa01589658$var$Game.GAME_STATUS.playing) return;\n        const transposedState = this.#transposeState(this.state);\n        const newTransposedState = transposedState.map((row)=>{\n            return this.#processRow(row, \"right\");\n        });\n        const newState = this.#transposeState(newTransposedState);\n        this.#compareAndMove(newState);\n    }\n    #processRow(row, direction = \"left\") {\n        let filteredRow = row.filter((num)=>num !== 0);\n        if (direction === \"left\") {\n            for(let i = 0; i < filteredRow.length - 1; i++)if (filteredRow[i] === filteredRow[i + 1]) {\n                filteredRow[i] *= 2;\n                filteredRow[i + 1] = 0;\n                this.score += filteredRow[i];\n            }\n        } else {\n            for(let i = filteredRow.length - 1; i > 0; i--)if (filteredRow[i] === filteredRow[i - 1]) {\n                filteredRow[i] *= 2;\n                filteredRow[i - 1] = 0;\n                this.score += filteredRow[i];\n            }\n        }\n        filteredRow = filteredRow.filter((num)=>num !== 0);\n        if (direction === \"left\") return [\n            ...filteredRow,\n            ...Array(row.length - filteredRow.length).fill(0)\n        ];\n        else return [\n            ...Array(row.length - filteredRow.length).fill(0),\n            ...filteredRow\n        ];\n    }\n    #compareAndMove(newState) {\n        let hasMoved = false;\n        newState.forEach((row, rowIndex)=>{\n            row.forEach((item, colIndex)=>{\n                if (item !== this.state[rowIndex][colIndex]) hasMoved = true;\n            });\n        });\n        this.setState(newState);\n        if (hasMoved) this.addCell();\n        this.updateStatus();\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    setState(newState) {\n        this.state = newState.map((row)=>[\n                ...row\n            ]);\n    }\n    #transposeState(matrix) {\n        return matrix[0].map((_, colIndex)=>{\n            return matrix.map((row)=>row[colIndex]);\n        });\n    }\n    updateStatus() {\n        let isWin = false;\n        let canMerge = false;\n        let hasEmptyCell = false;\n        this.state.forEach((row, rowIndex)=>{\n            row.forEach((item, colIndex)=>{\n                if (item === 2048) isWin = true;\n                if (item === 0) hasEmptyCell = true;\n                if (rowIndex < this.state.length - 1 && item === this.state[rowIndex + 1][colIndex]) canMerge = true;\n                if (colIndex < row.length - 1 && item === this.state[rowIndex][colIndex + 1]) canMerge = true;\n            });\n        });\n        if (isWin) {\n            this.status = $a5fd07fa01589658$var$Game.GAME_STATUS.win;\n            return;\n        }\n        if (!canMerge && !hasEmptyCell) this.status = $a5fd07fa01589658$var$Game.GAME_STATUS.lose;\n    }\n    addCell() {\n        const zeroPositions = [];\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 0) zeroPositions.push({\n                row: i,\n                col: j\n            });\n        }\n        if (zeroPositions.length === 0) return;\n        const randomIndex = Math.floor(Math.random() * zeroPositions.length);\n        const position = zeroPositions[randomIndex];\n        this.state[position.row][position.col] = Math.random() < 0.9 ? 2 : 4;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.GAME_STATUS.playing;\n        this.addCell();\n        this.addCell();\n    }\n    restart() {\n        this.status = $a5fd07fa01589658$var$Game.GAME_STATUS.idle;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.GAME_STATUS.idle) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$startMessage.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$button.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$button.classList.add(\"start\");\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n    }\n    $09e991522ca7e64e$var$updateGameField($09e991522ca7e64e$var$gameCells);\n    $09e991522ca7e64e$var$updateScore($09e991522ca7e64e$var$gameScore);\n    $09e991522ca7e64e$var$updateStatus();\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKey);\n});\nconst $09e991522ca7e64e$var$handleKey = (e)=>{\n    e.preventDefault();\n    switch(e.key){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        default:\n            break;\n    }\n    $09e991522ca7e64e$var$updateGameField($09e991522ca7e64e$var$gameCells);\n    $09e991522ca7e64e$var$updateScore($09e991522ca7e64e$var$gameScore);\n    $09e991522ca7e64e$var$updateStatus();\n};\nconst $09e991522ca7e64e$var$updateScore = (scoreContainer)=>{\n    scoreContainer.textContent = $09e991522ca7e64e$var$game.getScore();\n};\nconst $09e991522ca7e64e$var$updateGameField = (cells)=>{\n    const flatState = $09e991522ca7e64e$var$game.getState().flat();\n    cells.forEach((cell, index)=>{\n        cell.textContent = \"\";\n        cell.className = \"field-cell\";\n        if (flatState[index]) {\n            cell.textContent = flatState[index];\n            cell.className = `field-cell field-cell--${flatState[index]}`;\n        }\n    });\n};\nconst $09e991522ca7e64e$var$updateStatus = ()=>{\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    if (gameStatus === $a5fd07fa01589658$exports.GAME_STATUS.win) {\n        $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n        document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$handleKey);\n    }\n    if (gameStatus === $a5fd07fa01589658$exports.GAME_STATUS.lose) {\n        $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n        document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$handleKey);\n    }\n};\n\n\n//# sourceMappingURL=index.91188aa9.js.map\n","'use strict';\n\nconst gameField = document.querySelector('.game-field');\nconst gameCells = gameField.querySelectorAll('.field-cell');\nconst button = document.querySelector('.button');\nconst gameScore = document.querySelector('.game-score');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst startMessage = document.querySelector('.message-start');\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nbutton.addEventListener('click', () => {\n  if (game.getStatus() === Game.GAME_STATUS.idle) {\n    game.start();\n\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n\n    startMessage.classList.add('hidden');\n  } else {\n    game.restart();\n\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n    startMessage.classList.remove('hidden');\n\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.textContent = 'Start';\n  }\n\n  updateGameField(gameCells);\n  updateScore(gameScore);\n  updateStatus();\n\n  document.addEventListener('keydown', handleKey);\n});\n\nconst handleKey = (e) => {\n  e.preventDefault();\n\n  switch (e.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n\n    default:\n      break;\n  }\n\n  updateGameField(gameCells);\n  updateScore(gameScore);\n  updateStatus();\n};\n\nconst updateScore = (scoreContainer) => {\n  scoreContainer.textContent = game.getScore();\n};\n\nconst updateGameField = (cells) => {\n  const flatState = game.getState().flat();\n\n  cells.forEach((cell, index) => {\n    cell.textContent = '';\n    cell.className = 'field-cell';\n\n    if (flatState[index]) {\n      cell.textContent = flatState[index];\n      cell.className = `field-cell field-cell--${flatState[index]}`;\n    }\n  });\n};\n\nconst updateStatus = () => {\n  const gameStatus = game.getStatus();\n\n  if (gameStatus === Game.GAME_STATUS.win) {\n    winMessage.classList.remove('hidden');\n    document.removeEventListener('keydown', handleKey);\n  }\n\n  if (gameStatus === Game.GAME_STATUS.lose) {\n    loseMessage.classList.remove('hidden');\n    document.removeEventListener('keydown', handleKey);\n  }\n};\n","'use strict';\n\nclass Game {\n  static GAME_STATUS = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.status = Game.GAME_STATUS.idle;\n    this.initialState = initialState;\n    this.state = initialState.map((row) => [...row]);\n    this.score = 0;\n  }\n\n  moveLeft() {\n    if (this.status !== Game.GAME_STATUS.playing) {\n      return;\n    }\n\n    const newState = this.state.map((row) => this.#processRow(row, 'left'));\n\n    this.#compareAndMove(newState);\n  }\n\n  moveRight() {\n    if (this.status !== Game.GAME_STATUS.playing) {\n      return;\n    }\n\n    const newState = this.state.map((row) => this.#processRow(row, 'right'));\n\n    this.#compareAndMove(newState);\n  }\n\n  moveUp() {\n    if (this.status !== Game.GAME_STATUS.playing) {\n      return;\n    }\n\n    const transposedState = this.#transposeState(this.state);\n    const newTransposedState = transposedState.map((row) => {\n      return this.#processRow(row, 'left');\n    });\n    const newState = this.#transposeState(newTransposedState);\n\n    this.#compareAndMove(newState);\n  }\n\n  moveDown() {\n    if (this.status !== Game.GAME_STATUS.playing) {\n      return;\n    }\n\n    const transposedState = this.#transposeState(this.state);\n    const newTransposedState = transposedState.map((row) => {\n      return this.#processRow(row, 'right');\n    });\n    const newState = this.#transposeState(newTransposedState);\n\n    this.#compareAndMove(newState);\n  }\n\n  #processRow(row, direction = 'left') {\n    let filteredRow = row.filter((num) => num !== 0);\n\n    if (direction === 'left') {\n      for (let i = 0; i < filteredRow.length - 1; i++) {\n        if (filteredRow[i] === filteredRow[i + 1]) {\n          filteredRow[i] *= 2;\n          filteredRow[i + 1] = 0;\n          this.score += filteredRow[i];\n        }\n      }\n    } else {\n      for (let i = filteredRow.length - 1; i > 0; i--) {\n        if (filteredRow[i] === filteredRow[i - 1]) {\n          filteredRow[i] *= 2;\n          filteredRow[i - 1] = 0;\n          this.score += filteredRow[i];\n        }\n      }\n    }\n\n    filteredRow = filteredRow.filter((num) => num !== 0);\n\n    if (direction === 'left') {\n      return [\n        ...filteredRow,\n        ...Array(row.length - filteredRow.length).fill(0),\n      ];\n    } else {\n      return [\n        ...Array(row.length - filteredRow.length).fill(0),\n        ...filteredRow,\n      ];\n    }\n  }\n\n  #compareAndMove(newState) {\n    let hasMoved = false;\n\n    newState.forEach((row, rowIndex) => {\n      row.forEach((item, colIndex) => {\n        if (item !== this.state[rowIndex][colIndex]) {\n          hasMoved = true;\n        }\n      });\n    });\n\n    this.setState(newState);\n\n    if (hasMoved) {\n      this.addCell();\n    }\n\n    this.updateStatus();\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  setState(newState) {\n    this.state = newState.map((row) => [...row]);\n  }\n\n  #transposeState(matrix) {\n    return matrix[0].map((_, colIndex) => {\n      return matrix.map((row) => row[colIndex]);\n    });\n  }\n\n  updateStatus() {\n    let isWin = false;\n    let canMerge = false;\n    let hasEmptyCell = false;\n\n    this.state.forEach((row, rowIndex) => {\n      row.forEach((item, colIndex) => {\n        if (item === 2048) {\n          isWin = true;\n        }\n\n        if (item === 0) {\n          hasEmptyCell = true;\n        }\n\n        if (\n          rowIndex < this.state.length - 1 &&\n          item === this.state[rowIndex + 1][colIndex]\n        ) {\n          canMerge = true;\n        }\n\n        if (\n          colIndex < row.length - 1 &&\n          item === this.state[rowIndex][colIndex + 1]\n        ) {\n          canMerge = true;\n        }\n      });\n    });\n\n    if (isWin) {\n      this.status = Game.GAME_STATUS.win;\n\n      return;\n    }\n\n    if (!canMerge && !hasEmptyCell) {\n      this.status = Game.GAME_STATUS.lose;\n    }\n  }\n\n  addCell() {\n    const zeroPositions = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 0) {\n          zeroPositions.push({ row: i, col: j });\n        }\n      }\n    }\n\n    if (zeroPositions.length === 0) {\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * zeroPositions.length);\n    const position = zeroPositions[randomIndex];\n\n    this.state[position.row][position.col] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  start() {\n    this.status = Game.GAME_STATUS.playing;\n\n    this.addCell();\n    this.addCell();\n  }\n\n  restart() {\n    this.status = Game.GAME_STATUS.idle;\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$gameCells","$09e991522ca7e64e$var$gameField","document","querySelector","querySelectorAll","$09e991522ca7e64e$var$button","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$startMessage","$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","GAME_STATUS","idle","playing","win","lose","constructor","initialState","status","state","map","row","score","moveLeft","newState","processRow","compareAndMove","moveRight","moveUp","newTransposedState","transposedState","transposeState","moveDown","direction","filteredRow","filter","num","i","length","Array","fill","hasMoved","forEach","rowIndex","item","colIndex","setState","addCell","updateStatus","getScore","getState","getStatus","matrix","_","isWin","canMerge","hasEmptyCell","zeroPositions","j","push","col","randomIndex","Math","floor","random","position","start","restart","$09e991522ca7e64e$var$game","addEventListener","classList","remove","add","textContent","$09e991522ca7e64e$var$updateGameField","$09e991522ca7e64e$var$updateScore","$09e991522ca7e64e$var$updateStatus","$09e991522ca7e64e$var$handleKey","e","preventDefault","key","scoreContainer","cells","flatState","flat","cell","index","className","gameStatus","removeEventListener"],"version":3,"file":"index.91188aa9.js.map"}